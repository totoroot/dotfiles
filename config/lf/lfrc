set previewer lfpreviewer
set cleaner lfcleaner
set ratios 1:2:3

# interpreter for shell commands
set shell bash

# set mouse
# set icons
set drawbox on

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

map q quit
map w quit
map <up> up
map half-up
map <pgup> page-up
map <down> down
map half-down
map <pgdown> page-down
map scroll-down
map x glob-unselect

# Mouse wheel events
map <m-up> up
map <m-down> down
map <m-left> left
map <m-right> right

# Toggle hidden
# <backspace> (<Ctrl>+<h>)
map <backspace> set hidden!
map <delete> trash

# Reload preview
map <c-r> reload

map <c-c> copy
map <c-x> cut
map <c-v> paste

map <space> :toggle; down
map <enter> open

# Sorting entries
# keys    command
# sa      :{{ set sortby atime; set info atime; }}
# sc      :{{ set sortby ctime; set info ctime; }}
# se      :{{ set sortby ext; set info ; }}
# sn      :{{ set sortby natural; set info ; }}
# ss      :{{ set sortby size; set info size; }}
# st      :{{ set sortby time; set info time; }}
